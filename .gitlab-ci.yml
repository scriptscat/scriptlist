variables:
  APP_NAME: "scriptlist"
  APP_VERSION: 1.0.0
  NAMESPACE: app
  REGISTRY: "docker.io"
  REPOSITORY: "scriptcat/list"
  GO111MODULE: "on"
  GOPROXY: "https://goproxy.cn,direct"
  GOPATH: "$CI_PROJECT_DIR/.cache"
  GOLANGCI_LINT_CACHE: "$CI_PROJECT_DIR/.lint-cache"
  DOMAIN: "scriptcat.org"

stages:
  - test
  - build
  - docker
  - deploy

test-job:
  stage: test
  image: golang:1.18
  cache:
    key: go-cache
    paths:
      - .cache
  script:
    - go test -v ./...

lint-job:
  stage: test
  image: golangci/golangci-lint:v1.50
  cache:
    key: lint-cache
    paths:
      - .lint-cache
  script:
    - golangci-lint run

build:
  stage: build
  image: golang:1.18-alpine3.16
  rules:
    - if: $CI_COMMIT_BRANCH ==  "main" || $CI_COMMIT_BRANCH =~ /^release\/.*$/ || $CI_COMMIT_BRANCH =~ /^test\/.*$/
  cache:
    key: go-cache
    paths:
      - .cache
  script:
      - CGO_ENABLE=0 GOOS=linux GOARCH=amd64 go build -o $APP_NAME ./cmd/app
  artifacts:
    expire_in: 1 week
    paths:
      - $APP_NAME

build-docker:
  stage: docker
  image: docker:rc
  rules:
    - if: $CI_COMMIT_BRANCH ==  "main" || $CI_COMMIT_BRANCH =~ /^release\/.*$/ || $CI_COMMIT_BRANCH =~ /^test\/.*$/
  variables:
    DOCKER_HOST: tcp://docker-dind:2375
  before_script:
    - docker login $REGISTRY --username $DOCKER_USERNAME --password $DOCKER_PASSWORD

  script:
    - docker build . --build-arg APP_NAME=$APP_NAME -f deploy/docker/Dockerfile -t $REGISTRY/$REPOSITORY:$CI_COMMIT_SHORT_SHA
    - docker push $REGISTRY/$REPOSITORY:$CI_COMMIT_SHORT_SHA

deploy-prod:
  stage: deploy
  image: alpine/helm:3.9.0
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  script:
    - cd deploy/helm
    - |
      helm upgrade --install --namespace $NAMESPACE $APP_NAME . --kubeconfig $K3S_CONFIG \
      --set image.tag=$CI_COMMIT_SHORT_SHA --set image.repository=$REGISTRY/$REPOSITORY \
      --set etcdConfig.password=$ETCD_CONFIG_PASSWORD
      # 服务器无资源,暂时移除灰度
#      --set ingress.enabled=false
#    - cd ../gateway
#    - |
#      helm upgrade --install --namespace $NAMESPACE $APP_NAME-gateway . --kubeconfig $K3S_CONFIG \
#      --set istio.canary.enabled=false

deploy-canary:
  stage: deploy
  image: alpine/helm:3.9.0
  rules:
    - if: $CI_COMMIT_BRANCH == "deprecate/release/canary"
  script:
    - cd deploy/helm
    - |
      helm upgrade --install --namespace $NAMESPACE $APP_NAME-canary . --kubeconfig $K3S_CONFIG \
      --set image.tag=$CI_COMMIT_SHORT_SHA --set image.repository=$REGISTRY/$REPOSITORY \
      --set etcdConfig.password=$ETCD_CONFIG_PASSWORD \
      --set ingress.enabled=false
    - cd ../gateway
    - |
      helm upgrade --install --namespace $NAMESPACE $APP_NAME-gateway . --kubeconfig $K3S_CONFIG \
      --set istio.canary.enabled=true

deploy-pre:
  stage: deploy
  image: alpine/helm:3.9.0
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release\/.*$/
  script:
    - cd deploy/helm
    - |
      helm upgrade --install --namespace $NAMESPACE $APP_NAME-pre . -f values.yaml --kubeconfig $K3S_CONFIG \
      --set image.tag=$CI_COMMIT_SHORT_SHA --set image.repository=$REGISTRY/$REPOSITORY \
      --set etcdConfig.password=$ETCD_CONFIG_PASSWORD \
      --set appConfig.env=pre \
      --set ingress.hosts[0].host=pre.$DOMAIN \
      --set ingress.tls[0].hosts[0]=pre.$DOMAIN \
      --set resources.requests.cpu=50m \
      --set resources.requests.memory=128Mi

deploy-test:
  stage: deploy
  image: alpine/helm:3.9.0
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^test\/.*$/
  script:
    - cd deploy/helm
    - |
      helm upgrade --install \
      --namespace $NAMESPACE $APP_NAME-test . -f values.yaml --kubeconfig $K3S_CONFIG \
      --set image.tag=$CI_COMMIT_SHORT_SHA --set image.repository=$REGISTRY/$REPOSITORY \
      --set etcdConfig.password=$ETCD_CONFIG_PASSWORD \
      --set appConfig.env=test \
      --set ingress.hosts[0].host=test.$DOMAIN \
      --set ingress.tls[0].hosts[0]=test.$DOMAIN \
      --set resources.requests.cpu=50m \
      --set resources.requests.memory=128Mi