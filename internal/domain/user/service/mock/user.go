// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/scriptscat/scriptlist/internal/domain/user/entity"
	request "github.com/scriptscat/scriptlist/internal/http/dto/request"
	respond "github.com/scriptscat/scriptlist/internal/http/dto/respond"
	datatypes "gorm.io/datatypes"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// FindByUsername mocks base method.
func (m *MockUser) FindByUsername(username string, self bool) (*respond.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", username, self)
	ret0, _ := ret[0].(*respond.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockUserMockRecorder) FindByUsername(username, self interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockUser)(nil).FindByUsername), username, self)
}

// Follow mocks base method.
func (m *MockUser) Follow(uid, follow int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", uid, follow)
	ret0, _ := ret[0].(error)
	return ret0
}

// Follow indicates an expected call of Follow.
func (mr *MockUserMockRecorder) Follow(uid, follow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockUser)(nil).Follow), uid, follow)
}

// FollowList mocks base method.
func (m *MockUser) FollowList(uid int64, page request.Pages) ([]*entity.HomeFollow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowList", uid, page)
	ret0, _ := ret[0].([]*entity.HomeFollow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowList indicates an expected call of FollowList.
func (mr *MockUserMockRecorder) FollowList(uid, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowList", reflect.TypeOf((*MockUser)(nil).FollowList), uid, page)
}

// FollowerList mocks base method.
func (m *MockUser) FollowerList(uid int64, page request.Pages) ([]*entity.HomeFollow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowerList", uid, page)
	ret0, _ := ret[0].([]*entity.HomeFollow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowerList indicates an expected call of FollowerList.
func (mr *MockUserMockRecorder) FollowerList(uid, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowerList", reflect.TypeOf((*MockUser)(nil).FollowerList), uid, page)
}

// GetUserByWebhook mocks base method.
func (m *MockUser) GetUserByWebhook(token string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByWebhook", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByWebhook indicates an expected call of GetUserByWebhook.
func (mr *MockUserMockRecorder) GetUserByWebhook(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByWebhook", reflect.TypeOf((*MockUser)(nil).GetUserByWebhook), token)
}

// GetUserConfig mocks base method.
func (m *MockUser) GetUserConfig(uid int64) (*entity.UserConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserConfig", uid)
	ret0, _ := ret[0].(*entity.UserConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConfig indicates an expected call of GetUserConfig.
func (mr *MockUserMockRecorder) GetUserConfig(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConfig", reflect.TypeOf((*MockUser)(nil).GetUserConfig), uid)
}

// GetUserWebhook mocks base method.
func (m *MockUser) GetUserWebhook(uid int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWebhook", uid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWebhook indicates an expected call of GetUserWebhook.
func (mr *MockUserMockRecorder) GetUserWebhook(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWebhook", reflect.TypeOf((*MockUser)(nil).GetUserWebhook), uid)
}

// IsFollow mocks base method.
func (m *MockUser) IsFollow(uid, follow int64) (*entity.HomeFollow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFollow", uid, follow)
	ret0, _ := ret[0].(*entity.HomeFollow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFollow indicates an expected call of IsFollow.
func (mr *MockUserMockRecorder) IsFollow(uid, follow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFollow", reflect.TypeOf((*MockUser)(nil).IsFollow), uid, follow)
}

// RegenWebhook mocks base method.
func (m *MockUser) RegenWebhook(uid int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegenWebhook", uid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegenWebhook indicates an expected call of RegenWebhook.
func (mr *MockUserMockRecorder) RegenWebhook(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenWebhook", reflect.TypeOf((*MockUser)(nil).RegenWebhook), uid)
}

// SelfInfo mocks base method.
func (m *MockUser) SelfInfo(id int64) (*respond.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfInfo", id)
	ret0, _ := ret[0].(*respond.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelfInfo indicates an expected call of SelfInfo.
func (mr *MockUserMockRecorder) SelfInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfInfo", reflect.TypeOf((*MockUser)(nil).SelfInfo), id)
}

// SetUserNotifyConfig mocks base method.
func (m *MockUser) SetUserNotifyConfig(uid int64, notify datatypes.JSONMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserNotifyConfig", uid, notify)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserNotifyConfig indicates an expected call of SetUserNotifyConfig.
func (mr *MockUserMockRecorder) SetUserNotifyConfig(uid, notify interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserNotifyConfig", reflect.TypeOf((*MockUser)(nil).SetUserNotifyConfig), uid, notify)
}

// Unfollow mocks base method.
func (m *MockUser) Unfollow(uid, follow int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", uid, follow)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockUserMockRecorder) Unfollow(uid, follow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockUser)(nil).Unfollow), uid, follow)
}

// UserInfo mocks base method.
func (m *MockUser) UserInfo(id int64) (*respond.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserInfo", id)
	ret0, _ := ret[0].(*respond.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserInfo indicates an expected call of UserInfo.
func (mr *MockUserMockRecorder) UserInfo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserInfo", reflect.TypeOf((*MockUser)(nil).UserInfo), id)
}
