// Code generated by MockGen. DO NOT EDIT.
// Source: ./script_issue_comment.go
//
// Generated by this command:
//
//	mockgen -source=./script_issue_comment.go -destination=./mock/script_issue_comment.go
//

// Package mock_issue_repo is a generated GoMock package.
package mock_issue_repo

import (
	context "context"
	reflect "reflect"

	httputils "github.com/cago-frame/cago/pkg/utils/httputils"
	issue_entity "github.com/scriptscat/scriptlist/internal/model/entity/issue_entity"
	gomock "go.uber.org/mock/gomock"
)

// MockScriptIssueCommentRepo is a mock of ScriptIssueCommentRepo interface.
type MockScriptIssueCommentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockScriptIssueCommentRepoMockRecorder
	isgomock struct{}
}

// MockScriptIssueCommentRepoMockRecorder is the mock recorder for MockScriptIssueCommentRepo.
type MockScriptIssueCommentRepoMockRecorder struct {
	mock *MockScriptIssueCommentRepo
}

// NewMockScriptIssueCommentRepo creates a new mock instance.
func NewMockScriptIssueCommentRepo(ctrl *gomock.Controller) *MockScriptIssueCommentRepo {
	mock := &MockScriptIssueCommentRepo{ctrl: ctrl}
	mock.recorder = &MockScriptIssueCommentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScriptIssueCommentRepo) EXPECT() *MockScriptIssueCommentRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScriptIssueCommentRepo) Create(ctx context.Context, scriptIssueComment *issue_entity.ScriptIssueComment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, scriptIssueComment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScriptIssueCommentRepoMockRecorder) Create(ctx, scriptIssueComment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScriptIssueCommentRepo)(nil).Create), ctx, scriptIssueComment)
}

// Delete mocks base method.
func (m *MockScriptIssueCommentRepo) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockScriptIssueCommentRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockScriptIssueCommentRepo)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockScriptIssueCommentRepo) Find(ctx context.Context, issueId, id int64) (*issue_entity.ScriptIssueComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, issueId, id)
	ret0, _ := ret[0].(*issue_entity.ScriptIssueComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockScriptIssueCommentRepoMockRecorder) Find(ctx, issueId, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockScriptIssueCommentRepo)(nil).Find), ctx, issueId, id)
}

// FindAll mocks base method.
func (m *MockScriptIssueCommentRepo) FindAll(ctx context.Context, issueId int64) ([]*issue_entity.ScriptIssueComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, issueId)
	ret0, _ := ret[0].([]*issue_entity.ScriptIssueComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockScriptIssueCommentRepoMockRecorder) FindAll(ctx, issueId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockScriptIssueCommentRepo)(nil).FindAll), ctx, issueId)
}

// FindPage mocks base method.
func (m *MockScriptIssueCommentRepo) FindPage(ctx context.Context, issueId int64, page httputils.PageRequest) ([]*issue_entity.ScriptIssueComment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPage", ctx, issueId, page)
	ret0, _ := ret[0].([]*issue_entity.ScriptIssueComment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPage indicates an expected call of FindPage.
func (mr *MockScriptIssueCommentRepoMockRecorder) FindPage(ctx, issueId, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPage", reflect.TypeOf((*MockScriptIssueCommentRepo)(nil).FindPage), ctx, issueId, page)
}

// Update mocks base method.
func (m *MockScriptIssueCommentRepo) Update(ctx context.Context, scriptIssueComment *issue_entity.ScriptIssueComment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, scriptIssueComment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockScriptIssueCommentRepoMockRecorder) Update(ctx, scriptIssueComment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScriptIssueCommentRepo)(nil).Update), ctx, scriptIssueComment)
}
