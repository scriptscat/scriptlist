// Code generated by MockGen. DO NOT EDIT.
// Source: ./script_issue.go
//
// Generated by this command:
//
//	mockgen -source=./script_issue.go -destination=./mock/script_issue.go
//

// Package mock_issue_repo is a generated GoMock package.
package mock_issue_repo

import (
	context "context"
	reflect "reflect"

	httputils "github.com/codfrm/cago/pkg/utils/httputils"
	issue_entity "github.com/scriptscat/scriptlist/internal/model/entity/issue_entity"
	gomock "go.uber.org/mock/gomock"
)

// MockScriptIssueRepo is a mock of ScriptIssueRepo interface.
type MockScriptIssueRepo struct {
	ctrl     *gomock.Controller
	recorder *MockScriptIssueRepoMockRecorder
}

// MockScriptIssueRepoMockRecorder is the mock recorder for MockScriptIssueRepo.
type MockScriptIssueRepoMockRecorder struct {
	mock *MockScriptIssueRepo
}

// NewMockScriptIssueRepo creates a new mock instance.
func NewMockScriptIssueRepo(ctrl *gomock.Controller) *MockScriptIssueRepo {
	mock := &MockScriptIssueRepo{ctrl: ctrl}
	mock.recorder = &MockScriptIssueRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScriptIssueRepo) EXPECT() *MockScriptIssueRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScriptIssueRepo) Create(ctx context.Context, scriptIssue *issue_entity.ScriptIssue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, scriptIssue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScriptIssueRepoMockRecorder) Create(ctx, scriptIssue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScriptIssueRepo)(nil).Create), ctx, scriptIssue)
}

// Delete mocks base method.
func (m *MockScriptIssueRepo) Delete(ctx context.Context, scriptId, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, scriptId, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockScriptIssueRepoMockRecorder) Delete(ctx, scriptId, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockScriptIssueRepo)(nil).Delete), ctx, scriptId, id)
}

// Find mocks base method.
func (m *MockScriptIssueRepo) Find(ctx context.Context, scriptId, id int64) (*issue_entity.ScriptIssue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, scriptId, id)
	ret0, _ := ret[0].(*issue_entity.ScriptIssue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockScriptIssueRepoMockRecorder) Find(ctx, scriptId, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockScriptIssueRepo)(nil).Find), ctx, scriptId, id)
}

// FindPage mocks base method.
func (m *MockScriptIssueRepo) FindPage(ctx context.Context, scriptId int64, page httputils.PageRequest) ([]*issue_entity.ScriptIssue, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccessPage", ctx, scriptId, page)
	ret0, _ := ret[0].([]*issue_entity.ScriptIssue)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPage indicates an expected call of FindPage.
func (mr *MockScriptIssueRepoMockRecorder) FindPage(ctx, scriptId, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccessPage", reflect.TypeOf((*MockScriptIssueRepo)(nil).FindPage), ctx, scriptId, page)
}

// Update mocks base method.
func (m *MockScriptIssueRepo) Update(ctx context.Context, scriptIssue *issue_entity.ScriptIssue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, scriptIssue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockScriptIssueRepoMockRecorder) Update(ctx, scriptIssue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScriptIssueRepo)(nil).Update), ctx, scriptIssue)
}
