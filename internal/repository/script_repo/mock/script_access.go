// Code generated by MockGen. DO NOT EDIT.
// Source: ./script_access.go
//
// Generated by this command:
//
//	mockgen -source=./script_access.go -destination=./mock/script_access.go
//

// Package mock_script_repo is a generated GoMock package.
package mock_script_repo

import (
	context "context"
	reflect "reflect"

	httputils "github.com/codfrm/cago/pkg/utils/httputils"
	script_entity "github.com/scriptscat/scriptlist/internal/model/entity/script_entity"
	gomock "go.uber.org/mock/gomock"
)

// MockScriptAccessRepo is a mock of ScriptAccessRepo interface.
type MockScriptAccessRepo struct {
	ctrl     *gomock.Controller
	recorder *MockScriptAccessRepoMockRecorder
}

// MockScriptAccessRepoMockRecorder is the mock recorder for MockScriptAccessRepo.
type MockScriptAccessRepoMockRecorder struct {
	mock *MockScriptAccessRepo
}

// NewMockScriptAccessRepo creates a new mock instance.
func NewMockScriptAccessRepo(ctrl *gomock.Controller) *MockScriptAccessRepo {
	mock := &MockScriptAccessRepo{ctrl: ctrl}
	mock.recorder = &MockScriptAccessRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScriptAccessRepo) EXPECT() *MockScriptAccessRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScriptAccessRepo) Create(ctx context.Context, scriptAccess *script_entity.ScriptAccess) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, scriptAccess)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScriptAccessRepoMockRecorder) Create(ctx, scriptAccess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScriptAccessRepo)(nil).Create), ctx, scriptAccess)
}

// Delete mocks base method.
func (m *MockScriptAccessRepo) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockScriptAccessRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockScriptAccessRepo)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockScriptAccessRepo) Find(ctx context.Context, id int64) (*script_entity.ScriptAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*script_entity.ScriptAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockScriptAccessRepoMockRecorder) Find(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockScriptAccessRepo)(nil).Find), ctx, id)
}

// FindByGroupId mocks base method.
func (m *MockScriptAccessRepo) FindByGroupId(ctx context.Context, scriptId, groupId int64) (*script_entity.ScriptAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGroupId", ctx, scriptId, groupId)
	ret0, _ := ret[0].(*script_entity.ScriptAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGroupId indicates an expected call of FindByGroupId.
func (mr *MockScriptAccessRepoMockRecorder) FindByGroupId(ctx, scriptId, groupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGroupId", reflect.TypeOf((*MockScriptAccessRepo)(nil).FindByGroupId), ctx, scriptId, groupId)
}

// FindByUserId mocks base method.
func (m *MockScriptAccessRepo) FindByUserId(ctx context.Context, scriptId, userId int64) (*script_entity.ScriptAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, scriptId, userId)
	ret0, _ := ret[0].(*script_entity.ScriptAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockScriptAccessRepoMockRecorder) FindByUserId(ctx, scriptId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockScriptAccessRepo)(nil).FindByUserId), ctx, scriptId, userId)
}

// FindPage mocks base method.
func (m *MockScriptAccessRepo) FindPage(ctx context.Context, page httputils.PageRequest) ([]*script_entity.ScriptAccess, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPage", ctx, page)
	ret0, _ := ret[0].([]*script_entity.ScriptAccess)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindPage indicates an expected call of FindPage.
func (mr *MockScriptAccessRepoMockRecorder) FindPage(ctx, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPage", reflect.TypeOf((*MockScriptAccessRepo)(nil).FindPage), ctx, page)
}

// Update mocks base method.
func (m *MockScriptAccessRepo) Update(ctx context.Context, scriptAccess *script_entity.ScriptAccess) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, scriptAccess)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockScriptAccessRepoMockRecorder) Update(ctx, scriptAccess any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScriptAccessRepo)(nil).Update), ctx, scriptAccess)
}
