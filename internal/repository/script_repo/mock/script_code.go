// Code generated by MockGen. DO NOT EDIT.
// Source: ./script_code.go
//
// Generated by this command:
//
//	mockgen -source=./script_code.go -destination=./mock/script_code.go
//

// Package mock_script_repo is a generated GoMock package.
package mock_script_repo

import (
	context "context"
	reflect "reflect"

	httputils "github.com/cago-frame/cago/pkg/utils/httputils"
	script_entity "github.com/scriptscat/scriptlist/internal/model/entity/script_entity"
	gomock "go.uber.org/mock/gomock"
)

// MockScriptCodeRepo is a mock of ScriptCodeRepo interface.
type MockScriptCodeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockScriptCodeRepoMockRecorder
	isgomock struct{}
}

// MockScriptCodeRepoMockRecorder is the mock recorder for MockScriptCodeRepo.
type MockScriptCodeRepoMockRecorder struct {
	mock *MockScriptCodeRepo
}

// NewMockScriptCodeRepo creates a new mock instance.
func NewMockScriptCodeRepo(ctrl *gomock.Controller) *MockScriptCodeRepo {
	mock := &MockScriptCodeRepo{ctrl: ctrl}
	mock.recorder = &MockScriptCodeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScriptCodeRepo) EXPECT() *MockScriptCodeRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScriptCodeRepo) Create(ctx context.Context, scriptCode *script_entity.Code) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, scriptCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScriptCodeRepoMockRecorder) Create(ctx, scriptCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScriptCodeRepo)(nil).Create), ctx, scriptCode)
}

// Delete mocks base method.
func (m *MockScriptCodeRepo) Delete(ctx context.Context, scriptCode *script_entity.Code) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, scriptCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockScriptCodeRepoMockRecorder) Delete(ctx, scriptCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockScriptCodeRepo)(nil).Delete), ctx, scriptCode)
}

// Find mocks base method.
func (m *MockScriptCodeRepo) Find(ctx context.Context, id int64) (*script_entity.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*script_entity.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockScriptCodeRepoMockRecorder) Find(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockScriptCodeRepo)(nil).Find), ctx, id)
}

// FindAllLatest mocks base method.
func (m *MockScriptCodeRepo) FindAllLatest(ctx context.Context, scriptId int64, offset int, withcode bool) (*script_entity.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllLatest", ctx, scriptId, offset, withcode)
	ret0, _ := ret[0].(*script_entity.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllLatest indicates an expected call of FindAllLatest.
func (mr *MockScriptCodeRepoMockRecorder) FindAllLatest(ctx, scriptId, offset, withcode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllLatest", reflect.TypeOf((*MockScriptCodeRepo)(nil).FindAllLatest), ctx, scriptId, offset, withcode)
}

// FindByVersion mocks base method.
func (m *MockScriptCodeRepo) FindByVersion(ctx context.Context, scriptId int64, version string, withcode bool) (*script_entity.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByVersion", ctx, scriptId, version, withcode)
	ret0, _ := ret[0].(*script_entity.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByVersion indicates an expected call of FindByVersion.
func (mr *MockScriptCodeRepoMockRecorder) FindByVersion(ctx, scriptId, version, withcode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByVersion", reflect.TypeOf((*MockScriptCodeRepo)(nil).FindByVersion), ctx, scriptId, version, withcode)
}

// FindByVersionAll mocks base method.
func (m *MockScriptCodeRepo) FindByVersionAll(ctx context.Context, scriptId int64, version string) (*script_entity.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByVersionAll", ctx, scriptId, version)
	ret0, _ := ret[0].(*script_entity.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByVersionAll indicates an expected call of FindByVersionAll.
func (mr *MockScriptCodeRepoMockRecorder) FindByVersionAll(ctx, scriptId, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByVersionAll", reflect.TypeOf((*MockScriptCodeRepo)(nil).FindByVersionAll), ctx, scriptId, version)
}

// FindLatest mocks base method.
func (m *MockScriptCodeRepo) FindLatest(ctx context.Context, scriptId int64, offset int, withcode bool) (*script_entity.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatest", ctx, scriptId, offset, withcode)
	ret0, _ := ret[0].(*script_entity.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatest indicates an expected call of FindLatest.
func (mr *MockScriptCodeRepoMockRecorder) FindLatest(ctx, scriptId, offset, withcode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatest", reflect.TypeOf((*MockScriptCodeRepo)(nil).FindLatest), ctx, scriptId, offset, withcode)
}

// FindPreLatest mocks base method.
func (m *MockScriptCodeRepo) FindPreLatest(ctx context.Context, scriptId int64, offset int, withcode bool) (*script_entity.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPreLatest", ctx, scriptId, offset, withcode)
	ret0, _ := ret[0].(*script_entity.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPreLatest indicates an expected call of FindPreLatest.
func (mr *MockScriptCodeRepoMockRecorder) FindPreLatest(ctx, scriptId, offset, withcode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPreLatest", reflect.TypeOf((*MockScriptCodeRepo)(nil).FindPreLatest), ctx, scriptId, offset, withcode)
}

// List mocks base method.
func (m *MockScriptCodeRepo) List(ctx context.Context, id int64, request httputils.PageRequest) ([]*script_entity.Code, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, id, request)
	ret0, _ := ret[0].([]*script_entity.Code)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockScriptCodeRepoMockRecorder) List(ctx, id, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockScriptCodeRepo)(nil).List), ctx, id, request)
}

// Update mocks base method.
func (m *MockScriptCodeRepo) Update(ctx context.Context, scriptCode *script_entity.Code) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, scriptCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockScriptCodeRepoMockRecorder) Update(ctx, scriptCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScriptCodeRepo)(nil).Update), ctx, scriptCode)
}
