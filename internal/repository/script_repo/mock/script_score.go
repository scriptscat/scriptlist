// Code generated by MockGen. DO NOT EDIT.
// Source: ./script_score.go
//
// Generated by this command:
//
//	mockgen -source=./script_score.go -destination=./mock/script_score.go
//

// Package mock_script_repo is a generated GoMock package.
package mock_script_repo

import (
	context "context"
	reflect "reflect"

	httputils "github.com/codfrm/cago/pkg/utils/httputils"
	script_entity "github.com/scriptscat/scriptlist/internal/model/entity/script_entity"
	gomock "go.uber.org/mock/gomock"
)

// MockScriptScoreRepo is a mock of ScriptScoreRepo interface.
type MockScriptScoreRepo struct {
	ctrl     *gomock.Controller
	recorder *MockScriptScoreRepoMockRecorder
	isgomock struct{}
}

// MockScriptScoreRepoMockRecorder is the mock recorder for MockScriptScoreRepo.
type MockScriptScoreRepoMockRecorder struct {
	mock *MockScriptScoreRepo
}

// NewMockScriptScoreRepo creates a new mock instance.
func NewMockScriptScoreRepo(ctrl *gomock.Controller) *MockScriptScoreRepo {
	mock := &MockScriptScoreRepo{ctrl: ctrl}
	mock.recorder = &MockScriptScoreRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScriptScoreRepo) EXPECT() *MockScriptScoreRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScriptScoreRepo) Create(ctx context.Context, scriptScore *script_entity.ScriptScore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, scriptScore)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScriptScoreRepoMockRecorder) Create(ctx, scriptScore any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScriptScoreRepo)(nil).Create), ctx, scriptScore)
}

// CreateReplayByComment mocks base method.
func (m *MockScriptScoreRepo) CreateReplayByComment(ctx context.Context, scoreReply *script_entity.ScriptScoreReply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplayByComment", ctx, scoreReply)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReplayByComment indicates an expected call of CreateReplayByComment.
func (mr *MockScriptScoreRepoMockRecorder) CreateReplayByComment(ctx, scoreReply any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplayByComment", reflect.TypeOf((*MockScriptScoreRepo)(nil).CreateReplayByComment), ctx, scoreReply)
}

// Delete mocks base method.
func (m *MockScriptScoreRepo) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockScriptScoreRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockScriptScoreRepo)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockScriptScoreRepo) Find(ctx context.Context, id int64) (*script_entity.ScriptScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*script_entity.ScriptScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockScriptScoreRepoMockRecorder) Find(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockScriptScoreRepo)(nil).Find), ctx, id)
}

// FindByUser mocks base method.
func (m *MockScriptScoreRepo) FindByUser(ctx context.Context, uid, scriptId int64) (*script_entity.ScriptScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUser", ctx, uid, scriptId)
	ret0, _ := ret[0].(*script_entity.ScriptScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUser indicates an expected call of FindByUser.
func (mr *MockScriptScoreRepoMockRecorder) FindByUser(ctx, uid, scriptId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUser", reflect.TypeOf((*MockScriptScoreRepo)(nil).FindByUser), ctx, uid, scriptId)
}

// FindReplayByComment mocks base method.
func (m *MockScriptScoreRepo) FindReplayByComment(ctx context.Context, commentId, scriptId int64) (*script_entity.ScriptScoreReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReplayByComment", ctx, commentId, scriptId)
	ret0, _ := ret[0].(*script_entity.ScriptScoreReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReplayByComment indicates an expected call of FindReplayByComment.
func (mr *MockScriptScoreRepoMockRecorder) FindReplayByComment(ctx, commentId, scriptId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReplayByComment", reflect.TypeOf((*MockScriptScoreRepo)(nil).FindReplayByComment), ctx, commentId, scriptId)
}

// LastScore mocks base method.
func (m *MockScriptScoreRepo) LastScore(ctx context.Context, page httputils.PageRequest) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastScore", ctx, page)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastScore indicates an expected call of LastScore.
func (mr *MockScriptScoreRepoMockRecorder) LastScore(ctx, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastScore", reflect.TypeOf((*MockScriptScoreRepo)(nil).LastScore), ctx, page)
}

// ScoreList mocks base method.
func (m *MockScriptScoreRepo) ScoreList(ctx context.Context, scriptId int64, page httputils.PageRequest) ([]*script_entity.ScriptScore, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScoreList", ctx, scriptId, page)
	ret0, _ := ret[0].([]*script_entity.ScriptScore)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScoreList indicates an expected call of ScoreList.
func (mr *MockScriptScoreRepoMockRecorder) ScoreList(ctx, scriptId, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScoreList", reflect.TypeOf((*MockScriptScoreRepo)(nil).ScoreList), ctx, scriptId, page)
}

// Update mocks base method.
func (m *MockScriptScoreRepo) Update(ctx context.Context, scriptScore *script_entity.ScriptScore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, scriptScore)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockScriptScoreRepoMockRecorder) Update(ctx, scriptScore any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScriptScoreRepo)(nil).Update), ctx, scriptScore)
}

// UpdateReplayByComment mocks base method.
func (m *MockScriptScoreRepo) UpdateReplayByComment(ctx context.Context, scoreReply *script_entity.ScriptScoreReply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplayByComment", ctx, scoreReply)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReplayByComment indicates an expected call of UpdateReplayByComment.
func (mr *MockScriptScoreRepoMockRecorder) UpdateReplayByComment(ctx, scoreReply any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplayByComment", reflect.TypeOf((*MockScriptScoreRepo)(nil).UpdateReplayByComment), ctx, scoreReply)
}
