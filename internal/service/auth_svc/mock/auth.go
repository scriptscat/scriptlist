// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go
//
// Generated by this command:
//
//	mockgen -source auth.go -destination mock/auth.go
//

// Package mock_auth_svc is a generated GoMock package.
package mock_auth_svc

import (
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	auth "github.com/scriptscat/scriptlist/internal/api/auth"
	model "github.com/scriptscat/scriptlist/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthSvc is a mock of AuthSvc interface.
type MockAuthSvc struct {
	ctrl     *gomock.Controller
	recorder *MockAuthSvcMockRecorder
}

// MockAuthSvcMockRecorder is the mock recorder for MockAuthSvc.
type MockAuthSvcMockRecorder struct {
	mock *MockAuthSvc
}

// NewMockAuthSvc creates a new mock instance.
func NewMockAuthSvc(ctrl *gomock.Controller) *MockAuthSvc {
	mock := &MockAuthSvc{ctrl: ctrl}
	mock.recorder = &MockAuthSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthSvc) EXPECT() *MockAuthSvcMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAuthSvc) Get(ctx context.Context) *model.AuthInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(*model.AuthInfo)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockAuthSvcMockRecorder) Get(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAuthSvc)(nil).Get), ctx)
}

// GetLoginToken mocks base method.
func (m *MockAuthSvc) GetLoginToken(ctx context.Context, uid int64, loginId, token string) (*model.LoginToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginToken", ctx, uid, loginId, token)
	ret0, _ := ret[0].(*model.LoginToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginToken indicates an expected call of GetLoginToken.
func (mr *MockAuthSvcMockRecorder) GetLoginToken(ctx, uid, loginId, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginToken", reflect.TypeOf((*MockAuthSvc)(nil).GetLoginToken), ctx, uid, loginId, token)
}

// Login mocks base method.
func (m *MockAuthSvc) Login(ctx context.Context, uid int64) (*model.LoginToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, uid)
	ret0, _ := ret[0].(*model.LoginToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthSvcMockRecorder) Login(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthSvc)(nil).Login), ctx, uid)
}

// OAuthCallback mocks base method.
func (m *MockAuthSvc) OAuthCallback(ctx context.Context, req *auth.OAuthCallbackRequest) (*auth.OAuthCallbackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OAuthCallback", ctx, req)
	ret0, _ := ret[0].(*auth.OAuthCallbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OAuthCallback indicates an expected call of OAuthCallback.
func (mr *MockAuthSvcMockRecorder) OAuthCallback(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OAuthCallback", reflect.TypeOf((*MockAuthSvc)(nil).OAuthCallback), ctx, req)
}

// Refresh mocks base method.
func (m *MockAuthSvc) Refresh(ctx context.Context, uid int64, loginId, token string) (*model.LoginToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, uid, loginId, token)
	ret0, _ := ret[0].(*model.LoginToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthSvcMockRecorder) Refresh(ctx, uid, loginId, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuthSvc)(nil).Refresh), ctx, uid, loginId, token)
}

// RequireLogin mocks base method.
func (m *MockAuthSvc) RequireLogin(force bool) gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequireLogin", force)
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// RequireLogin indicates an expected call of RequireLogin.
func (mr *MockAuthSvcMockRecorder) RequireLogin(force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireLogin", reflect.TypeOf((*MockAuthSvc)(nil).RequireLogin), force)
}

// SetCtx mocks base method.
func (m *MockAuthSvc) SetCtx(ctx context.Context, uid int64) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCtx", ctx, uid)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCtx indicates an expected call of SetCtx.
func (mr *MockAuthSvcMockRecorder) SetCtx(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCtx", reflect.TypeOf((*MockAuthSvc)(nil).SetCtx), ctx, uid)
}
